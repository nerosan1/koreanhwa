import React, { useState } from 'react';
import { X, ChevronDown } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

const KoreanQuizModal = () => {

    const navigate = useNavigate();
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [showExplanation, setShowExplanation] = useState(false);

  const questionData = {
    id: 105,
    testName: 'TOPIK II Reading Practice Test 1',
    tags: ['#[Grammar] Ng·ªØ ph√°p', '#[Part 3] ƒê·ªçc hi·ªÉu vƒÉn b·∫£n'],
    question: 'Îã§Ïùå ÎπàÏπ∏Ïóê Îì§Ïñ¥Í∞à Í∞ÄÏû• ÏïåÎßûÏùÄ Í≤ÉÏùÑ Í≥†Î•¥Ïã≠ÏãúÏò§. ÌïúÍµ≠Ïñ¥Î•º Î∞∞Ïö∞Îäî _____ ÎßéÏùÄ ÏãúÍ∞ÑÍ≥º ÎÖ∏Î†•Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.',
    questionTranslation: 'Ch·ªçn t·ª´ th√≠ch h·ª£p nh·∫•t ƒë·ªÉ ƒëi·ªÅn v√†o ch·ªó tr·ªëng. ƒê·ªÉ h·ªçc ti·∫øng H√†n _____ c·∫ßn r·∫•t nhi·ªÅu th·ªùi gian v√† c√¥ng s·ª©c.',
    options: [
      { id: 'A', text: 'Í≤ÉÏùÄ', meaning: 'vi·ªác (l√†)' },
      { id: 'B', text: 'ÎäîÎç∞', meaning: 'nh∆∞ng m√†' },
      { id: 'C', text: 'ÏóêÎäî', meaning: '·ªü/t·∫°i' },
      { id: 'D', text: 'ÏúºÎ©¥ÏÑú', meaning: 'trong khi' }
    ],
    correctAnswer: 'A',
    explanation: 'ƒê√°p √°n ƒë√∫ng l√† A. "Í≤ÉÏùÄ" ƒë∆∞·ª£c d√πng ƒë·ªÉ danh t·ª´ h√≥a ƒë·ªông t·ª´ "ÌïôÏäµÌïòÎã§" (h·ªçc t·∫≠p), t·∫°o th√†nh "ÌïúÍµ≠Ïñ¥Î•º Î∞∞Ïö∞Îäî Í≤ÉÏùÄ" (vi·ªác h·ªçc ti·∫øng H√†n). C·∫•u tr√∫c n√†y th∆∞·ªùng ƒë∆∞·ª£c d√πng ƒë·ªÉ nh·∫•n m·∫°nh ch·ªß ƒë·ªÅ trong c√¢u.'
  };

  const handleAnswerSelect = (answerId) => {
    setSelectedAnswer(answerId);
  };

  const handleShowExplanation = () => {
    setShowExplanation(!showExplanation);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b-2 border-gray-200">
          <div>
            <h2 className="text-2xl font-bold text-black mb-2">
              ƒê√°p √°n chi ti·∫øt #{questionData.id}
            </h2>
            <h3 className="text-lg text-gray-700 mb-3">{questionData.testName}</h3>
            <div className="flex flex-wrap gap-2">
              {questionData.tags.map((tag, index) => (
                <span 
                  key={index}
                  className="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm font-medium"
                >
                  {tag}
                </span>
              ))}
            </div>
          </div>
          <button 
          onClick={() => {navigate(-1);}}
          className="text-gray-400 hover:text-black transition-colors">
            <X className="w-8 h-8" />
          </button>
        </div>

        {/* Question Content */}
        <div className="p-6">
          {/* Korean Question */}
          <div className="mb-6">
            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
              <div className="flex items-start gap-3">
                <span className="bg-black text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-1">
                  {questionData.id}
                </span>
                <div>
                  <p className="text-lg font-medium text-black leading-relaxed">
                    {questionData.question}
                  </p>
                  <p className="text-gray-600 mt-2 italic">
                    {questionData.questionTranslation}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Answer Options */}
          <div className="space-y-3 mb-6">
            {questionData.options.map((option) => (
              <div
                key={option.id}
                onClick={() => handleAnswerSelect(option.id)}
                className={`border-2 rounded-lg p-4 cursor-pointer transition-all duration-200 ${
                  selectedAnswer === option.id
                    ? option.id === questionData.correctAnswer
                      ? 'border-green-500 bg-green-50'
                      : 'border-red-500 bg-red-50'
                    : option.id === questionData.correctAnswer && selectedAnswer
                    ? 'border-green-500 bg-green-50'
                    : 'border-gray-300 hover:border-yellow-400 hover:bg-yellow-50'
                }`}
              >
                <div className="flex items-center gap-4">
                  <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold ${
                    selectedAnswer === option.id
                      ? option.id === questionData.correctAnswer
                        ? 'bg-green-500 text-white'
                        : 'bg-red-500 text-white'
                      : option.id === questionData.correctAnswer && selectedAnswer
                      ? 'bg-green-500 text-white'
                      : 'bg-gray-200 text-gray-700'
                  }`}>
                    {option.id}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-3">
                      <span className="text-xl font-bold text-black">{option.text}</span>
                      <span className="text-gray-600">({option.meaning})</span>
                    </div>
                  </div>
                  {option.id === questionData.correctAnswer && selectedAnswer && (
                    <div className="text-green-600 font-bold">‚úì ƒê√°p √°n ƒë√∫ng</div>
                  )}
                  {selectedAnswer === option.id && option.id !== questionData.correctAnswer && (
                    <div className="text-red-600 font-bold">‚úó Sai</div>
                  )}
                </div>
              </div>
            ))}
          </div>

          {/* Correct Answer Indicator */}
          {selectedAnswer && (
            <div className="mb-6">
              <div className="bg-green-100 border border-green-400 rounded-lg p-4">
                <div className="flex items-center gap-2">
                  <span className="text-green-700 font-bold">ƒê√°p √°n ƒë√∫ng:</span>
                  <span className="bg-green-500 text-white px-3 py-1 rounded-full font-bold">
                    {questionData.correctAnswer}
                  </span>
                </div>
              </div>
            </div>
          )}

          {/* Explanation Toggle */}
          <div className="border-t-2 border-gray-200 pt-6">
            <button
              onClick={handleShowExplanation}
              className="flex items-center gap-2 text-black font-bold hover:text-yellow-600 transition-colors"
            >
              <span>Gi·∫£i th√≠ch chi ti·∫øt ƒë√°p √°n</span>
              <ChevronDown className={`w-5 h-5 transition-transform ${showExplanation ? 'rotate-180' : ''}`} />
            </button>
            
            {showExplanation && (
              <div className="mt-4 bg-gray-50 rounded-lg p-4">
                <h4 className="font-bold text-black mb-3">Gi·∫£i th√≠ch:</h4>
                <p className="text-gray-700 leading-relaxed">
                  {questionData.explanation}
                </p>
                
                {/* Additional Korean Grammar Info */}
                <div className="mt-4 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                  <h5 className="font-bold text-black mb-2">üí° Ki·∫øn th·ª©c ng·ªØ ph√°p:</h5>
                  <ul className="text-sm text-gray-700 space-y-1">
                    <li>‚Ä¢ <strong>Í≤ÉÏùÄ:</strong> D√πng ƒë·ªÉ danh t·ª´ h√≥a ƒë·ªông t·ª´/t√≠nh t·ª´</li>
                    <li>‚Ä¢ <strong>ÎäîÎç∞:</strong> Di·ªÖn t·∫£ s·ª± t∆∞∆°ng ph·∫£n ho·∫∑c cung c·∫•p n·ªÅn t·∫£ng cho c√¢u sau</li>
                    <li>‚Ä¢ <strong>ÏóêÎäî:</strong> Ch·ªâ ƒë·ªãa ƒëi·ªÉm, th·ªùi gian c·ª• th·ªÉ</li>
                    <li>‚Ä¢ <strong>ÏúºÎ©¥ÏÑú:</strong> Di·ªÖn t·∫£ hai h√†nh ƒë·ªông x·∫£y ra ƒë·ªìng th·ªùi</li>
                  </ul>
                </div>
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="flex justify-between items-center mt-8 pt-6 border-t-2 border-gray-200">
            <div className="flex gap-3">
              <button className="bg-gray-100 text-gray-700 px-6 py-3 rounded-lg font-medium hover:bg-gray-200 transition-colors">
                ‚Üê C√¢u tr∆∞·ªõc
              </button>
              <button className="bg-gray-100 text-gray-700 px-6 py-3 rounded-lg font-medium hover:bg-gray-200 transition-colors">
                C√¢u ti·∫øp ‚Üí
              </button>
            </div>
            <div className="flex gap-3">
              <button className="bg-yellow-400 text-black px-6 py-3 rounded-lg font-bold hover:bg-yellow-500 transition-colors">
                Th√™m v√†o ghi ch√∫
              </button>
              <button className="bg-black text-white px-6 py-3 rounded-lg font-bold hover:bg-gray-800 transition-colors">
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default KoreanQuizModal;